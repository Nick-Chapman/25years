
  -rw-r----- 1 nic nic 8710 Feb 12  1993 connect.c

Build with:
$ gcc connect.c -o connect

This file contains a rewrite (from memory) of the connect4 program I had written at University. The date of my file is Feb 93, which is during the final month at Macroni Research Centre, my first job. But the comment at the file head says "to practise using Emacs"; so probably I wrote this version when I started after Uni in Sep 1990. New job: new editor! (I was a vi guy at Uni)

The programs plays connect4. The user interface is rudimentary text display, re-printing the board after every move. The machine selects its move using minimax with alpha-beta pruning, either to a fixed depth, or using a simplistic iterative-deepening, based on "minimum adds" (#positions considered). The default value of 40,000 has the machine search about 8 levels at the start of the game, but sticking it to 10,000,000 will get you to 12 levels, and it still basically instantaneous. (To change the value: type "i" (missing from the displayed help), to switch of iterative deepening, then "i" again, to turn it back on, and then you are prompted for the level. Or just hack the code!). As the game progress and columns fill up, the depth often increases, sometimes so the machine can see to the end of the game.

The static evaluation function was of my own devising: A simplistic weighted sum of cells. The weights are set as the number of potential win-lines each cell is involved in. The nice thing about this scheme is that it can be incrementally adjusted with ease as a move is considered, and then later retracted. The more tricky thing is to detect if the last piece played completes a winline. Win/loose is represented by a score of +/- 1000, which is bigger/smaller than any other score.

The single most important piece of connect4 specific knowledge is hard-coded on line 54. This static ordering of move-quality determines the effectiveness of the alpha-beta pruning. Without this order, the same value for move choice are computed, it just takes a lot longer.

The machine plays well. I think it is hard to beat. It was hard to beat even back in 1993 (and even the original at Uni in 1990, when it was normally only searching to a depth of 5 or 6). It has a fondness for the middle column; not surprising given the design of the SEF. And when it knows it will win, it tell you so! To be fair it also notifies if the human will win. Or should win - the human may screw it up!

One final nice touch. You can swap playing positions at any time with "s". So you can easily get the machine to play itself.
